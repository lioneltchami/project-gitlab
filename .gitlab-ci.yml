stages:
  - test
  - build
  - deploy-dev
  - deploy-prod

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_NAME: $CI_REGISTRY_IMAGE/shakespeare-app
  
before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

test:
  stage: test
  image: python:3.11-slim
  before_script:
    - pip install -r requirements.txt
  script:
    - make test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"

security-scan:
  stage: test
  image: python:3.11-slim
  script:
    - make security-scan
  artifacts:
    reports:
      junit: bandit-report.xml
    paths:
      - bandit-report.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
  allow_failure: true

build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHA -t $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

deploy-dev:
  stage: deploy-dev
  image: alpine:latest
  before_script:
    - apk add --no-cache curl bash kubectl
  script:
    - make deploy-dev DOCKER_TAG=$CI_COMMIT_SHA
  environment:
    name: development
    url: https://shakespeare-dev.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

deploy-prod:
  stage: deploy-prod
  image: alpine:latest
  before_script:
    - apk add --no-cache curl bash kubectl
  script:
    - make deploy-prod DOCKER_TAG=$CI_COMMIT_SHA
  environment:
    name: production
    url: https://shakespeare.example.com
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

rollback-prod:
  stage: deploy-prod
  image: alpine:latest
  before_script:
    - apk add --no-cache bash kubectl
  script:
    - make rollback ENVIRONMENT=prod
  environment:
    name: production
    url: https://shakespeare.example.com
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == "main"